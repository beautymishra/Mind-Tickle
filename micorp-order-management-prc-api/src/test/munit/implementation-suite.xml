<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="implementation-suite.xml" />
	<munit:test name="create-order-test" doc:id="cbe41afa-b238-41b1-a9e0-840a1562e1b8" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Create Order" doc:id="e1d55791-8824-4218-b754-21dd8086ee10" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b23cf788-41b6-4bff-be7a-5ff4e1e9749b" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://createordertest\mock_payload1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://createordertest\mock_attributes1.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://createordertest\mock_variable_2.dwl')]" />
						<munit-tools:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createordertest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="895abbdf-97ae-4f24-a623-40d2e1fe941a" >
				<munit:payload value="#[output application/json --- readUrl('classpath://createordertest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createordertest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createordertest\set-event_variable_2.dwl')]" />
					<munit:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createordertest\set-event_variable_3.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to create-order" doc:id="64a46e4a-9492-415b-affc-bbbb282454d0" name="create-order"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ccb0c24e-7da1-4c17-86ec-4c70c107c544" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createordertest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="create-customer-test" doc:id="5150c058-ae59-43db-97e4-9fac072dbeb6" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Create Customer" doc:id="50eda2ff-80bd-4bfb-81f1-fdc5b276aad7" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="65a21d23-08b3-4d95-b47b-5d45508629b4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://createcustomertest\mock_payload1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://createcustomertest\mock_attributes1.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://createcustomertest\mock_variable_3.dwl')]" />
						<munit-tools:variable key="orderId" value="#[output application/json --- readUrl('classpath://createcustomertest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createcustomertest\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="330dfdbd-1b96-4da7-aa95-f9a32e7a1c56" >
				<munit:payload value="#[output application/json --- readUrl('classpath://createcustomertest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createcustomertest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createcustomertest\set-event_variable_3.dwl')]" />
					<munit:variable key="orderId" value="#[output application/json --- readUrl('classpath://createcustomertest\set-event_variable_4.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createcustomertest\set-event_variable_5.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to create-customer" doc:id="a3ada2c3-b398-4657-8bc6-a5ee0fe8ad94" name="create-customer"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="9708735b-4dd1-4773-a728-bdb39a3bdeed" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createcustomertest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<flow name="mock-http:request" doc:id="ed979d9e-ddd2-4617-af1d-125b4793e9e8" >
		<try doc:name="Try" doc:id="d32e4dd6-0d4a-4451-84fe-27af22f1e950" >
			<munit-tools:retrieve doc:name="Retrieve" doc:id="dd44ca1e-b42b-411e-8467-24244eac4163" key="Mock Create Item"/>
			<error-handler >
				<on-error-continue enableNotifications="false" logException="false" doc:name="On Error Continue" doc:id="002de454-730f-4abc-86f6-2b0ee14de812" type="ANY">
					<set-payload value="#[1]" doc:name="Set Payload" doc:id="162a2406-0fd6-4cf8-8d60-3d2cca8b5c50" />
				</on-error-continue>
			</error-handler>
		</try>
		<munit-tools:store doc:name="Store" doc:id="6f00b355-0dbf-4ac4-b0bb-3d2a3c755082" key="Mock Create Item">
			<munit-tools:value ><![CDATA[#[payload + 1]]]></munit-tools:value>
		</munit-tools:store>
		<choice doc:name="Choice" doc:id="a038d021-df85-4277-a45f-62b5705e96ed" >
			<when expression="#[payload == 1]">
				<munit:set-event doc:name="Set Event" doc:id="82dabdcd-47a0-4e46-a0e2-e7f939dc63ae" >
					<munit:payload value="#[output application/json --- readUrl('classpath://createitemtest\mock_payload2.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variables >
						<munit:variable key="successPayload" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_12.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createitemtest\mock_variable_13.dwl')]" />
						<munit:variable key="rootMessage" value="#[readUrl('classpath://createitemtest\mock_variable_14.dwl')]" />
						<munit:variable key="orderId" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_15.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_16.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="counter" value="#[readUrl('classpath://createitemtest\mock_variable_17.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<when expression="#[payload == 2]">
				<munit:set-event doc:name="Set Event" doc:id="5ff7a9fd-33d3-4eb9-9a10-f94695de8a4a" >
					<munit:payload value="#[output application/json --- readUrl('classpath://createitemtest\mock_payload3.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variables >
						<munit:variable key="successPayload" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_18.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createitemtest\mock_variable_19.dwl')]" />
						<munit:variable key="rootMessage" value="#[readUrl('classpath://createitemtest\mock_variable_20.dwl')]" />
						<munit:variable key="orderId" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_21.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createitemtest\mock_variable_22.dwl')]" encoding="UTF-8" mediaType="application/json" />
						<munit:variable key="counter" value="#[readUrl('classpath://createitemtest\mock_variable_23.dwl')]" />
					</munit:variables>
				</munit:set-event>
			</when>
			<otherwise >
				<munit-tools:fail doc:name="Fail" doc:id="d654fc57-6146-4c29-9781-1c7964a3bac4" message="There are no more events to mock"/>
			</otherwise>
		</choice>
	</flow>
	<munit:test name="create-item-test" doc:id="54f7c266-058d-4923-99d3-b1c5733b50d7" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Create Item" doc:id="193bdeaa-e828-4243-b778-5e57c731ab75" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8e2aabe5-b724-4141-99fd-04d9a6212b23" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-call flow="mock-http:request" />
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="bd64cada-2451-4827-8b3d-85d25bbb0230" >
				<munit:payload value="#[output application/json --- readUrl('classpath://createitemtest\set-event_payload1.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://createitemtest\set-event_attributes1.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://createitemtest\set-event_variable_3.dwl')]" />
					<munit:variable key="orderId" value="#[output application/json --- readUrl('classpath://createitemtest\set-event_variable_4.dwl')]" encoding="UTF-8" mediaType="application/json" />
					<munit:variable key="inputPayload" value="#[output application/json --- readUrl('classpath://createitemtest\set-event_variable_5.dwl')]" encoding="UTF-8" mediaType="application/json" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to create-item" doc:id="a3adc4ef-f701-44cd-b713-df95eb7aa214" name="create-item"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="116feea8-c923-4747-a924-8d9a1c0257ec" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import createitemtest::assert_expression_payload1
---
assert_expression_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
